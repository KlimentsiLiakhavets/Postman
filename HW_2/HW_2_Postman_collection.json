{
	"info": {
		"_postman_id": "6a8c3242-62d1-4076-b597-18bd14284d6e",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"Статус код 200\";\r",
							"pm.test(\"Status code 200\", function () { \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"\"Проверить, что в body приходит правильный string\";\r",
							"pm.test(\"В body правильный string\", function () { \r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"Статус код 200\";\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\" Спарсить response body в json\";\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"\"Проверить, что name в ответе равно name с request\";\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(resBody.name).to.eql(\"Klim\");\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age с request\";\r",
							"pm.test(\"age\", function () {\r",
							"pm.expect(resBody.age).to.eql(\"39\");\r",
							"});\r",
							"\r",
							"\" Проверить, что salary в ответе равно salary с request\";\r",
							"pm.test(\"salary\",function () {\r",
							"    pm.expect(resBody.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"\"Спарсить request\";\r",
							"let req = request.data;\r",
							"\r",
							"\"Проверить, что name в ответе равно name с request (name забрать из request)\";\r",
							"pm.test(\"name_c_Body\", function () {\r",
							"    pm.expect(resBody.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age c request (age забрать из request)\";\r",
							"pm.test(\"age_c_Body\", function () {\r",
							"    pm.expect(resBody.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\"Проверить, что salary в ответе равно salary c request (salary забрать из request)\";\r",
							"pm.test(\"salary_c_Body\", function () {\r",
							"    pm.expect(resBody.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\"Вывести в консоль параметр family из response\";\r",
							"console.log(resBody.family);\r",
							"\r",
							"\" Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\";\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(resBody.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Klim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"Статус код 200\";\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\";\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"\"Спарсить request\";\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"\" Проверить, что name в ответе равно name c request (name забрать из request)\";\r",
							"pm.test(\"name_is\", function () {\r",
							"    pm.expect(resBody.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age c request (age забрать из request)\";\r",
							"pm.test(\"age_is\", function () {\r",
							"    pm.expect(resBody.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\"Проверить, что salary в ответе равно salary c request (salary забрать из request)\";\r",
							"pm.test(\"salary_is\", function () {\r",
							"    pm.expect(resBody.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\" Вывести в консоль параметр family из response\";\r",
							"console.log(resBody.family);\r",
							"\r",
							"\"Проверить, что у параметра dog есть параметры name\";\r",
							"pm.test(\"У_dog_есть_name\", () => {\r",
							"    pm.expect(resBody.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\" Проверить, что у параметра dog есть параметры age\";\r",
							"pm.test(\"У_dog_есть_age\", () => {\r",
							"    pm.expect(resBody.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр name имеет значение Luky\";\r",
							"pm.test(\"У_dog_есть_имя_Luky\", () => {\r",
							"    pm.expect(resBody.family.pets.dog.name).to.be.oneOf([\"Luky\"]);\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр age имеет значение 4\";\r",
							"pm.test(\"У dog age 4\", () => {\r",
							"    pm.expect(resBody.family.pets.dog.age).to.be.oneOf([4]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Klim&age=39&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Klim"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"Статус код 200\";\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\";\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"\" Спарсить request\";\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"\"Проверить, что name в ответе равно name s request (name забрать из request)\";\r",
							"pm.test(\"name_is\", function () {\r",
							"    pm.expect(resBody.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\" Проверить, что age в ответе равно age из request (age забрать из request)\";\r",
							"pm.test(\"age_is\", function () {\r",
							"    pm.expect(resBody.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"\"Вывести в консоль параметр salary из request\";\r",
							"console.log(\"salary из request\", req.salary);\r",
							"\r",
							"\" Вывести в консоль параметр salary из response\";\r",
							"console.log(\"salary из response\", resBody.salary);\r",
							"\r",
							"\"Вывести в консоль 0-й элемент параметра salary из response\";\r",
							"console.log(\"salary 0-й элемент\", resBody.salary[0]);\r",
							"\r",
							"\"Вывести в консоль 1-й элемент параметра salary из response\";\r",
							"console.log(\"salary 1-й элемент\", resBody.salary[1]);\r",
							"\r",
							"\"Вывести в консоль 2-й элемент параметра salary из response\";\r",
							"console.log(\"salary 2-й элемент\", resBody.salary[2]);\r",
							"\r",
							"\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\";\r",
							"pm.test(\"Salary[0]\", function () {\r",
							"    pm.expect(resBody.salary[0]).to.eql(+req.salary);});\r",
							"\r",
							"\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\";\r",
							"pm.test(\"Salary[1]\", function () {\r",
							"    pm.expect(+resBody.salary[1]).to.eql(req.salary*2);});\r",
							"\r",
							"\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\";\r",
							"pm.test(\"Salary[2]\", function () {\r",
							"    pm.expect(+resBody.salary[2]).to.eql(req.salary*3);});\r",
							"\r",
							"\"Передать в окружение переменную name\";\r",
							"pm.environment.set(\"name\", resBody.name);\r",
							"\r",
							"\"Передать в окружение переменную age\";\r",
							"pm.environment.set(\"age\", resBody.age);\r",
							"\r",
							"\"Передать в окружение переменную salary\";\r",
							"pm.environment.set(\"salary\", resBody.salary[0]);\r",
							"\r",
							"\"Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\";\r",
							"for (a = 0; a < resBody.salary.length; a++){\r",
							"  console.log(\"cycle\", resBody.salary[a]);\r",
							"  };\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Klim&age=39&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Klim"
						},
						{
							"key": "age",
							"value": "39"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\"Статус код 200\";\r",
							"pm.test(\"Status_code_200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\";\r",
							"let resBody = pm.response.json();\r",
							"\r",
							"\"Спарсить request\";\r",
							"let req = request.data;\r",
							"\r",
							"\" Проверить, что json response имеет параметр start_qa_salary\";\r",
							"pm.test(\"json_response_имеет_параметр_start_qa_salary\", () => {\r",
							"\t pm.expect(resBody).to.have.property(\"start_qa_salary\")});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_6_months\";\r",
							"pm.test(\"json_response_имеет_параметр_qa_salary_after_6_months\", () => {\r",
							"\t pm.expect(resBody).to.have.property(\"qa_salary_after_6_months\")});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_12_months\";\r",
							"pm.test(\"json_response_имеет_параметр_qa_salary_after_12_months\", () => { pm.expect(resBody).to.have.property(\"qa_salary_after_12_months\")});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\";\r",
							"pm.test(\"json_response_имеет_параметр_qa_salary_after_1.5_year\", () => {\r",
							"\t pm.expect(resBody).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"\t});\r",
							"\r",
							"\" Проверить, что json response имеет параметр qa_salary_after_3.5_years\";\r",
							"pm.test(\"json_response_имеет_параметр_qa_salary_after_3.5_years\", () => {\r",
							"\t pm.expect(resBody).to.have.property(\"qa_salary_after_3.5_years\")});\r",
							"\r",
							"\"Проверить, что json response имеет параметр person\";\r",
							"pm.test(\"json_response_имеет_параметр_person\", () => { pm.expect(resBody).to.have.property(\"person\")});\r",
							"\r",
							"\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\";\r",
							"pm.test(\"Параметр_start_qa_salary_равен_salary_из_request\", function () {\r",
							"\t pm.expect(resBody.start_qa_salary).to.eql(1*req.salary)}); \r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\";\r",
							"pm.test(\"Параметр_qa_salary_after_6_months_равен_salary*2_из_request\", function () {\r",
							"\t pm.expect(resBody.qa_salary_after_6_months).to.eql(req.salary*2) });\r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\";\r",
							"pm.test(\"Параметр_qa_salary_after_12_months_равен_salary*2.7_из_request\", function () {\r",
							"\t pm.expect(resBody.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"     }); \r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\";\r",
							"pm.test(\"Параметр_qa_salary_after_1.5_year_равен salary*3.3_из_request\", function () {\r",
							"\t pm.expect(resBody[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3) });\r",
							"\r",
							"\" Проверить, что параметр_qa_salary after         3.5_years равен salary*3.8 из request (salary забрать из request)\";\r",
							"pm.test(\"Параметр_qa_salary_after_3.5_years_равен salary*3.8_из_request\", function () { pm.expect(resBody[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8) }); \r",
							"\r",
							"\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\";\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"\t pm.expect(resBody.person.u_name[1]).to.eql(req.salary*1) });\r",
							"\r",
							"\"Проверить, что что параметр u_age равен age из request (age забрать из request)\";\r",
							"pm.test(\"параметр_u_age_равен_age_из_request\", function () { \r",
							"pm.expect(resBody.person.u_age).to.eql(+req.age) \r",
							"    }); \r",
							"\r",
							"\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\";\r",
							"pm.test(\"параметр_u_salary_5_years_равен_salary*4.2_из_request\", function () {\r",
							"\t pm.expect(resBody.person.u_salary_5_years).to.eql(req.salary*4.2) }); \r",
							"\r",
							"\"Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\";\r",
							"for (let a in resBody.person){\r",
							"\t console.log( a, \":\", resBody.person[a]);\r",
							"     };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}